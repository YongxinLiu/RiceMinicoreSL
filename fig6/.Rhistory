tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
ggsave(paste("3C.LN_genus_abundance_tax.pdf", sep=""), p, width = w*1.3, height = h*1.51, units = "mm")
# plot cor
(p = ggplot(cor, aes(x = OTUID, y=rho, fill=rhotype)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme+ theme(legend.position = "none")+ xlab("Genus"))
ggsave(paste("3C.LN_genus_cor.pdf", sep=""), p, width = w*0.75, height = h*1.5, units = "mm")
min(cor$mean)
max(cor$mean)
write.table("OTUID\t", file=paste("3C.LN_genus_tax_cor.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
suppressWarnings(write.table(cor, file=paste("3C.LN_genus_tax_cor.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
ggsave(paste("3C.LN_genus_abundance_tax.pdf", sep=""), p, width = w*1.3, height = h*1.51, units = "mm")
# plot cor
(p = ggplot(cor, aes(x = OTUID, y=rho, fill=rhotype)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme+ theme(legend.position = "none")+ xlab("Genus"))
ggsave(paste("3C.LN_genus_cor.pdf", sep=""), p, width = w*0.75, height = h*1.5, units = "mm")
min(cor$mean)
max(cor$mean)
write.table("OTUID\t", file=paste("3C.LN_genus_tax_cor.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
suppressWarnings(write.table(cor, file=paste("3C.LN_genus_tax_cor.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
View(tax)
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
# tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
View(tax)
tax = rbind(tax, c("Unassigned", "Unassigned"))
View(tax)
View(tax)
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
# tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
knitr::opts_chunk$set(
echo=T, comment=NA, message=F, warning=F,
fig.align="center", fig.width=5, fig.height=3, dpi=300)
# Clean workspace
rm(list=ls())
source("http://210.75.224.110/stat_plot_functions.R")
w=89
h=59
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
# tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
View(cor)
rownames(cor)
View(tax)
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
library(dplyr)
tax = read.table("../data/taxonomy.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
# Split Proteobacteria phylum into class
idx = tax$Phylum %in% "Proteobacteria"
tax[idx,]$Phylum = tax[idx,]$Class
# Select Phylum-Genus
tax =  tax[,c(2,6)]
# Dereplicate, 5K into 5 hundard
tax = dplyr::distinct(tax)
# reorder
# cor = as.data.frame(dplyr::arrange(cor, desc(rhotype), mean))
cor = read.table("3E.LN_genus_MSE_tax.txt", header=T, row.names =1, sep="\t", comment.char="", stringsAsFactors = F)
rownames(cor) = cor$OTUID
cor$OTUID = factor(cor$OTUID, levels = rownames(cor))
# Select correlated genus
idx =  tax$Genus %in% rownames(cor)
tax = tax[idx,]
# tax = rbind(tax, c("Unassigned", "Unassigned"))
rownames(tax) = tax$Genus
cor$Phylum = tax[rownames(cor),]$Phylum
# plot RA of genus
(p = ggplot(cor, aes(x = OTUID, y=mean, fill=Phylum)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme + theme(legend.position = "right") + xlab("Genus") + ylab("Relative abundance (%)"))
ggsave(paste("3C.LN_genus_abundance_tax.pdf", sep=""), p, width = w*1.3, height = h*1.51, units = "mm")
# plot cor
(p = ggplot(cor, aes(x = OTUID, y=rho, fill=rhotype)) +   geom_bar(stat = "identity") +
coord_flip() + main_theme+ theme(legend.position = "none")+ xlab("Genus"))
ggsave(paste("3C.LN_genus_cor.pdf", sep=""), p, width = w*0.75, height = h*1.5, units = "mm")
min(cor$mean)
max(cor$mean)
write.table("OTUID\t", file=paste("3C.LN_genus_tax_cor.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
suppressWarnings(write.table(cor, file=paste("3C.LN_genus_tax_cor.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
setwd("D:/BaiduNetdiskWorkspace/github/RiceMinicoreSL/fig6")
knitr::opts_chunk$set(
echo=T, comment=NA, message=F, warning=F,
fig.align="center", fig.width=5, fig.height=3, dpi=300)
# Clean workspace
rm(list=ls())
source("http://210.75.224.110/stat_plot_functions.R")
w=89
h=59
size=8
alpha = read.table("../data/tillerNumberBeijing.txt", header=T, row.names=1, sep="\t", comment.char="")
design = read.table("../data/tillerNumberBeijing.txt", header=T, row.names=1, sep="\t")
# set group
design$group = design$Group
unique(design$group)
# Select by manual set group
if (TRUE){
sub_design = subset(design, Genotype %in% c("Nip","d14","d53","d17","d10"))
# 调置组排序 Set group order
sub_design$group  = factor(sub_design$group, levels=c("Nipponbare", "Mutants"))
sub_design$Genotype  = factor(sub_design$Genotype, levels=c("Nip","d14","d53","d17","d10"))
}else{
sub_design = design
}
# save table
write.table("ID\t", file=paste("6C.tiller.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
suppressWarnings(write.table(sub_design, file=paste("6C.tiller.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
# filter
idx = rownames(sub_design) %in% rownames(alpha)
sub_design=sub_design[idx, , drop=F]
sub_alpha=alpha[rownames(sub_design),]
# add design to alpha
sub_alpha$Genotype  = factor(sub_alpha$Genotype, levels=c("Nip","d14","d53","d17","d10"))
index = cbind(sub_alpha, sub_design$group)
colnames(index)[dim(index)[2]]="group"
table(sub_design$group)
method = c("TillerNumber")
# for(m in method){
m=method
model = aov(index[[m]] ~ group, data=index)
Tukey_HSD = TukeyHSD(model, ordered = TRUE, conf.level = 0.95)
Tukey_HSD_table = as.data.frame(Tukey_HSD$group)
write.table(paste(m, "\n\t", sep=""), file=paste("6C.",m,".txt",sep=""),append = F, quote = F, eol = "", row.names = F, col.names = F)
suppressWarnings(write.table(Tukey_HSD_table, file=paste("6C./",m,".txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = T))
paste("6C./",m,".txt",sep="")
write.table(paste(m, "\n\t", sep=""), file=paste("6C.",m,".txt",sep=""),append = F, quote = F, eol = "", row.names = F, col.names = F)
suppressWarnings(write.table(Tukey_HSD_table, file=paste("6C.",m,".txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = T))
out = LSD.test(model,"group", p.adj="none") # alternative fdr
stat = out$groups
index$stat=stat[as.character(index$group),]$groups
max=max(index[,c(m)])
min=min(index[,c(m)])
x = index[,c("group",m)]
y = x %>% group_by(group) %>% summarise_(Max=paste('max(',m,')',sep=""))
suppressWarnings(write.table(index[,c(m,"group")], file=paste("fig6/",m,"_raw.txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = T))
out = LSD.test(model,"group", p.adj="none") # alternative fdr
stat = out$groups
index$stat=stat[as.character(index$group),]$groups
max=max(index[,c(m)])
min=min(index[,c(m)])
x = index[,c("group",m)]
y = x %>% group_by(group) %>% summarise_(Max=paste('max(',m,')',sep=""))
# suppressWarnings(write.table(index[,c(m,"group")], file=paste("6C.",m,"_raw.txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = T))
y=as.data.frame(y)
rownames(y)=y$group
index$y=y[as.character(index$group),]$Max + (max-min)*0.05
group_mean = x %>% group_by(group) %>% summarise_all(mean)
suppressWarnings(write.table(t(group_mean), file=paste("fig6/",m,"_mean.txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = F))
p = ggplot(index, aes(x=group, y=index[[m]], color=group)) +
geom_boxplot(alpha=1, outlier.shape = NA, outlier.size=0, size=0.5, width=0.7, fill="transparent") +
labs(x="Groups", y=paste(m, "")) + theme_classic() + main_theme +
geom_text(data=index, aes(x=group, y=y, color=group, label= stat)) +
geom_jitter(aes(shape=Genotype), position=position_jitter(0.3), size=0.5, alpha=0.5)
p
alpha = read.table("../data/tillerNumberBeijing.txt", header=T, row.names=1, sep="\t", comment.char="")
design = read.table("../data/tillerNumberBeijing.txt", header=T, row.names=1, sep="\t")
# set group
design$group = design$Group
unique(design$group)
# Select by manual set group
if (TRUE){
sub_design = subset(design, Genotype %in% c("Nip","d14","d53","d17","d10"))
# Set group order
sub_design$group  = factor(sub_design$group, levels=c("Nipponbare", "Mutants"))
sub_design$Genotype  = factor(sub_design$Genotype, levels=c("Nip","d14","d53","d17","d10"))
}else{
sub_design = design
}
# save table
write.table("ID\t", file=paste("6C.tiller.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
suppressWarnings(write.table(sub_design, file=paste("6C.tiller.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
# filter
idx = rownames(sub_design) %in% rownames(alpha)
sub_design=sub_design[idx, , drop=F]
sub_alpha=alpha[rownames(sub_design),]
# add design to alpha
sub_alpha$Genotype  = factor(sub_alpha$Genotype, levels=c("Nip","d14","d53","d17","d10"))
index = cbind(sub_alpha, sub_design$group)
colnames(index)[dim(index)[2]]="group"
table(sub_design$group)
method = c("TillerNumber")
m = method
model = aov(index[[m]] ~ group, data=index)
Tukey_HSD = TukeyHSD(model, ordered = TRUE, conf.level = 0.95)
Tukey_HSD_table = as.data.frame(Tukey_HSD$group)
write.table(paste(m, "\n\t", sep=""), file=paste("6C.",m,".txt",sep=""),append = F, quote = F, eol = "", row.names = F, col.names = F)
suppressWarnings(write.table(Tukey_HSD_table, file=paste("6C.",m,".txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = T))
# LSD test
out = LSD.test(model,"group", p.adj="none") # alternative fdr
stat = out$groups
index$stat=stat[as.character(index$group),]$groups
max=max(index[,c(m)])
min=min(index[,c(m)])
x = index[,c("group",m)]
y = x %>% group_by(group) %>% summarise_(Max=paste('max(',m,')',sep=""))
# suppressWarnings(write.table(index[,c(m,"group")], file=paste("6C.",m,"_raw.txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = T))
y=as.data.frame(y)
rownames(y)=y$group
index$y=y[as.character(index$group),]$Max + (max-min)*0.05
group_mean = x %>% group_by(group) %>% summarise_all(mean)
# suppressWarnings(write.table(t(group_mean), file=paste("6C.",m,"_mean.txt",sep=""), append = T, quote = F, sep="\t", eol = "\n", na = "NA", dec = ".", row.names = T, col.names = F))
p = ggplot(index, aes(x=group, y=index[[m]], color=group)) +
geom_boxplot(alpha=1, outlier.shape = NA, outlier.size=0, size=0.5, width=0.7, fill="transparent") +
labs(x="Groups", y=paste(m, "")) + theme_classic() + main_theme +
geom_text(data=index, aes(x=group, y=y, color=group, label= stat)) +
geom_jitter(aes(shape=Genotype), position=position_jitter(0.3), size=0.5, alpha=0.5)
ggsave(paste("6C.boxplot", m, "4x3.pdf", sep=""), width = 89, height = 59, units = "mm")
p = p + theme(legend.position = "NA")
p=p+theme(axis.text.x=element_text(angle=45,vjust=1, hjust=1))
ggsave(paste("6C.boxplot", m, ".pdf", sep=""), width = 89*0.4*1.15, height = 59*1.3, units = "mm")
genus = read.table("../data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
genus = read.table("../data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("../data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Positive","Negative")]
genus = genus[rownames(metadata),]
# set order
unique(metadata$genotype)
metadata$genotype = factor(metadata$genotype, levels = c("Np","d14","d53","d17","d10"))
metadata$group  = factor(metadata$genotype3, levels=c("Nipponbare", "Mutants"))
# plotting
library(amplicon)
(p = alpha_boxplot(genus, index = "Positive", metadata, groupID = group ))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
source("http://210.75.224.110/stat_plot_functions.R")
dir.create("fig3",showWarnings = F)
w=89
h=59
# genus = read.table("../result/tax/sum_g3.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
# metadata = read.table("../doc/design_SL.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
# group = "genotypeID"
# # 筛选样本
# idx =  c("NpRtBj","d14RtBj","d53RtBj","d17RtBj","d10RtBj")
# metadata = metadata[metadata$genotypeID %in% idx,]
# genus = genus[,rownames(metadata)]
# # 添加新分组方式
# metadata$genotype3 ="Mutants"
# metadata[metadata$genotype1 == "NP",]$genotype3 = "Nipponbare"
# metadata$genotype = gsub("RtBj","",metadata$genotypeID)
# # 保存目标分蘖
# write.table("SampleID\t", file=paste("data/SLmutant_metadata.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
# suppressWarnings(write.table(metadata, file=paste("data/SLmutant_metadata.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
# # 保存目标属丰度
# write.table("genus\t", file=paste("data/SLmutant_genus.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
# suppressWarnings(write.table(genus, file=paste("data/SLmutant_genus.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
genus = read.table("data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Positive","Negative")]
genus = read.table("data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Positive","Negative")]
genus = read.table("data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
View(genus)
metadata = read.table("data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
View(metadata)
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Positive","Negative")]
View(genus)
genus = read.table("../result/tax/sum_g3.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("../doc/design_SL.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotypeID"
# 筛选样本
idx =  c("NpRtBj","d14RtBj","d53RtBj","d17RtBj","d10RtBj")
metadata = metadata[metadata$genotypeID %in% idx,]
genus = genus[,rownames(metadata)]
# 添加新分组方式
metadata$genotype3 ="Mutants"
metadata[metadata$genotype1 == "NP",]$genotype3 = "Nipponbare"
metadata$genotype = gsub("RtBj","",metadata$genotypeID)
View(genus)
# 保存目标属丰度
write.table("genus\t", file=paste("data/SLmutant_genus.txt",sep = ""), append = F, sep="\t", quote=F,  eol = "",row.names=F, col.names=F)
suppressWarnings(write.table(genus, file=paste("data/SLmutant_genus.txt",sep = ""), append = T, sep="\t", quote=F, row.names=T, col.names=T))
genus = read.table("../data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("../data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Positive","Negative")]
genus = genus[rownames(metadata),]
# set order
unique(metadata$genotype)
metadata$genotype = factor(metadata$genotype, levels = c("Np","d14","d53","d17","d10"))
metadata$group  = factor(metadata$genotype3, levels=c("Nipponbare", "Mutants"))
# plotting
library(amplicon)
(p = alpha_boxplot(genus, index = "Positive", metadata, groupID = group ))
p = p + theme(legend.position = "NA")
genus = read.table("../data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("../data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Positive","Negative")]
genus = genus[rownames(metadata),]
# set order
unique(metadata$genotype)
metadata$genotype = factor(metadata$genotype, levels = c("Np","d14","d53","d17","d10"))
metadata$group  = factor(metadata$genotype3, levels=c("Nipponbare", "Mutants"))
# plotting
library(amplicon)
(p = alpha_boxplot(genus, index = "Positive", metadata, groupID = group ))
p = p + theme(legend.position = "NA")
m="Positive"
index = cbind(metadata,genus)
model = aov(index[[m]] ~ group, data=index)
Tukey_HSD = TukeyHSD(model, ordered = TRUE, conf.level = 0.95)
Tukey_HSD_table = as.data.frame(Tukey_HSD$group)
out = LSD.test(model,"group", p.adj="none") # alternative fdr
stat = out$groups
index$stat=stat[as.character(index$group),]$groups
max=max(index[,c(m)])
min=min(index[,c(m)])
x = index[,c("group",m)]
y = x %>% group_by(group) %>% summarise_(Max=paste('max(',m,')',sep=""))
y=as.data.frame(y)
rownames(y)=y$group
index$y=y[as.character(index$group),]$Max + (max-min)*0.05
group_mean = x %>% group_by(group) %>% summarise_all(mean)
p = ggplot(index, aes(x=group, y=index[[m]], color=group)) +
geom_boxplot(alpha=1, outlier.shape = NA, outlier.size=0, size=0.5, width=0.7, fill="transparent") +
labs(x="Groups", y=paste(m, "")) + theme_classic() + main_theme +
geom_text(data=index, aes(x=group, y=y, color=group, label= stat)) +
geom_jitter(aes(shape=genotype), position=position_jitter(0.3), size=0.5, alpha=0.5)
ggsave(paste("6C.boxplot", m, "4x3.pdf", sep=""), width = 89, height = 59, units = "mm")
p = p + theme(legend.position = "NA")
p=p+theme(axis.text.x=element_text(angle=45,vjust=1, hjust=1))
ggsave(paste("6C.boxplot", m, ".pdf", sep=""), width = 89*0.4*1.3, height = 59*1.3, units = "mm")
genus = read.table("../data/SLmutant_genus.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
metadata = read.table("../data/SLmutant_metadata.txt", header=T, row.names=1, sep="\t", comment.char="",quote="")
group = "genotype3"
genus = as.data.frame(t(genus))[,c("Negative","Negative")]
genus = genus[rownames(metadata),]
# set order
unique(metadata$genotype)
metadata$genotype = factor(metadata$genotype, levels = c("Np","d14","d53","d17","d10"))
metadata$group  = factor(metadata$genotype3, levels=c("Nipponbare", "Mutants"))
# plotting
library(amplicon)
(p = alpha_boxplot(genus, index = "Negative", metadata, groupID = group ))
p = p + theme(legend.position = "NA")
m="Negative"
index = cbind(metadata,genus)
model = aov(index[[m]] ~ group, data=index)
Tukey_HSD = TukeyHSD(model, ordered = TRUE, conf.level = 0.95)
Tukey_HSD_table = as.data.frame(Tukey_HSD$group)
out = LSD.test(model,"group", p.adj="none") # alternative fdr
stat = out$groups
index$stat=stat[as.character(index$group),]$groups
max=max(index[,c(m)])
min=min(index[,c(m)])
x = index[,c("group",m)]
y = x %>% group_by(group) %>% summarise_(Max=paste('max(',m,')',sep=""))
y=as.data.frame(y)
rownames(y)=y$group
index$y=y[as.character(index$group),]$Max + (max-min)*0.05
group_mean = x %>% group_by(group) %>% summarise_all(mean)
p = ggplot(index, aes(x=group, y=index[[m]], color=group)) +
geom_boxplot(alpha=1, outlier.shape = NA, outlier.size=0, size=0.5, width=0.7, fill="transparent") +
labs(x="Groups", y=paste(m, "")) + theme_classic() + main_theme +
geom_text(data=index, aes(x=group, y=y, color=group, label= stat)) +
geom_jitter(aes(shape=genotype), position=position_jitter(0.3), size=0.5, alpha=0.5)
ggsave(paste("6C.boxplot", m, "4x3.pdf", sep=""), width = 89, height = 59, units = "mm")
p = p + theme(legend.position = "NA")
p=p+theme(axis.text.x=element_text(angle=45,vjust=1, hjust=1))
ggsave(paste("6C.boxplot", m, ".pdf", sep=""), width = 89*0.4*1.3, height = 59*1.3, units = "mm")
